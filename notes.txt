DESIGN NOTES___________________________________________________________________

DRYR:

> JS that adds class to acted on button should change text: 
>> if innerHTML = "like" then change to "liked", etc. 

> JS needs to work on all ajaxian buttons

> starting themes are green, blue, orange, black, white. make those look good. 
>> TEMP: use css switcher so can look at each quickly

> eventually replace UTF8 icons with SVG

Backend:

> pagination

> quotes have 16px icon w/ username

> media uploads




-------------------------------------------------------------------------------
RULES:
css modules:
> normalize- vanilla or 2016, consider 3d party either way, add nothing
> core- default layout #1
> color themes for each primary layout

> prism and other packages, 3d party or homebrew 

SASS will handle this, but notepad++ doesn't highlight natively. 
This can be done in the style configurator (but only in that one) 
or by defining the language with an XML file.  
Anyways, use @import in each theme.scss and build from there. 

Workflow would be
1. write css/scss and save parts as _module.scss and each theme is theme.scss 
that imports the modules
2. use sass to turn that final scss into css
3. minimize and gzip to make reallytotallyfinal-min.css

Results are kinda messy and agitate my ocd but it'll be minimized anyways. 
I took most comments out of the SCSS partials to help keep dev file sizes down, 
the plain CSS versions are intact for reference.  


1. OVERALL LAYOUT 

Layout is based on "content out": fluid, misc buzzwords. 
Page has basic functional modules that are put together as needed. 
NAV holds links to static pages.
ARTICLE holds user content. 
Article subsections:
div for icon
section to wrap all other content (this may change if find better way)
section for content
section for tags
section for buttons

I'm using flexbox for this, should have fallback and doesn't feel proper

Layers are nearly flat, bg layer, main content, and header and misc raised items
this is to minimalize the chrome and focus on the content. 


FONTS
base on modern windows Candara/Cambria - clean, easy to read, no downloads 
on main themes, but that's OK on 'fun' themes like 1337. 
but monospace aim for Source Code Pro instead of Consolas


LINKS 
in NAV and tags only underline when hovered
in text body are always underlined



2. MAIN BLOCKS IN PAGE: header, footer, article, section, aside, nav

HEADER
desktop: narrow fixed horizontal strip OR narrow fixed side col
smallscreen: flows with content


FOOTER


ARTICLE 


3. OTHER CONTAINED ELEMENTS: 

BLOCKQUOTE


CODE 



FORMS


LISTS

MEDIA


TABLES







PALETTES ----------------------------------------------------------------------
Colors used should be consistenly linked to themes and actions, e.g.: 
white = paper
red = warning/alert
orange/yellow/tan = special paper- lists, tables, etc.
green = go, success
blue = button, link

basic colors are 
$theme-color: ROYGBIV etc
$theme-comp: the opposite color: Red/green, blue/orange, yellow/purple
and can get fancy, $theme-triad2 and $theme-triad3, etc. 

$theme-shadow: darken($theme, 80%);
$comp-shadow: uses complimentary color to theme, e.g. blue shadow on orange bg

$action-color: used for buttons etc, blue unless bg is blue. 
$action-muted: a pale tint to show inactive or disabled

$paper: used for most text meant to be read, usually white/off-white
$paper2: used for secondary text, usually off-white/tan 

$outlines: used for blockquotes, lists, etc. one of the shadow colors. 

$th-color: table header color
$zebra: zebra stripes on tables etc. 





COLORBLIND NOTES-

red (crimson) is usually muddled brick red in 3chromacy and olive in 2chromacy

vivid orange will appear more tan

yellow will be paler

green varies the most, from off-tint to blue or yellow or even reddish!
example- http://www.colorhexa.com/22f08c

vivid blue will be very close to avg or at least blue-ish.

purple (9100ff) appears more royal blue

magenta is more dull purple


-----------------------------------
SCSS

I'm using is because it looks like vanilla CSS. SASS looks like Python. 
which is OK but I'd rather stick with common convention mostly. 

variables
this looks useful, help contain chaos, consistent palette
also if I go and make a dozen color theme for fun and then rewrite the css 
on my primary test page, i can just drop in most of it with copy-paste

nesting
not bad, but I'm used to vanilla css

imports
meh, it's messy, and doesn't have a way to automagically minimize
I'd have to write my own script to organize and minimize. 

MIXINS
their example is for browser extensions like -webkit

EXTEND
seems logical


most of this I barely need for my own projects other than restraining evolution 
into a dozen random styles 







-------------------------------------------------------------------------------

> ability score and modifiers
??? should I do roll 4d6 which is fairly simple
OR do the point buy, it's more customizable but will need 
1. incremental thingies to scroll numbers
2. instant AJAX to add and subtract from total points allowed (7 is -4, 17 is +13)
so all the scrollers start at 10 (cost of 0) and has box w/ remaining points
! would have to stop user if try to go past... 
!! also have to factor in racial stats!! so this func would have to reuse 
the radio btn check....
set the abilities at 10, then run that to add/sub. 


 
> alignment gets some influence, e.g. evil unicorns are vampiric not healers
not sure how to set this up cleanly
> also barbarians can't be lawful! how handle?

------------------
PHP
need: 
error handle form
 

I want to put race and class stuff into some sort of DB instead of just into 
page html becuase that way can CMS it, and also keep the radio options matching 
the output stuff, so one source of data, sent to many functions.

shit I just realized the best way to do it is have a generic template 
that can handle pathfinder, khajiit, etc.  


form: RACE and CLASS should be template, pull from DB in loop, func for both 
race and class like 
generate_radios($purpose)


not sure about ability selector thing but using JS to change for race etc 
sounds cool still



output_skills()
grab selected radio buttons
use db crossjoin to get ability mods for each skill 
do math for race etc to get the misc skill mods 
do math to add both of these to return as default skill level
shit- does it need a way to let user add points as well?

subroutine 
if class skill then add tr class='class-skill'
main routine
print "<tr> <td>$skill</td> <td>$ability_mod</td> <td>$skill_misc_mods</td> </tr>";














---------------------------

.snip1217 a:before,
.snip1217 a:after {
  height: 3px;
  position: absolute;
  content: '';
  transition: all 0.35s ease;
  background-color: #9b59b6;
  width: 0;
}
.snip1217 a:before {
  top: 0;
  left: 0;
}
.snip1217 a:after {
  bottom: 0;
  right: 0;
}
.snip1217 a:hover:before,
.snip1217 .current a:before,
.snip1217 a:hover:after,
.snip1217 .current a:after {
  width: 100%;
}










/-----------------------------------------------------------------------------/
A generator, once more, only this has various rules of grammar and phonetics 
you can feed in a sample of you fictional language and it'll generate either
- more new words
- evolve the language by choosing random mutations


