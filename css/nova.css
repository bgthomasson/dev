/* Block level and global elements ------------------------------------------ 
* Not sure why I used RGB but it's not bad. HSL is just a different mindset. 
* ink is for font color. wallpaper is for the body. "mainpaper" is for <main>. 
* Testing the light/dark tho I'm OK with the old "light middle, dark sides" style I was using. 
* if it was just for desktop I'd leave it like that but phones only see the middle. 
* A texture is tempting. 
* Good news is you can declare a universal mix like so below ->
*/

:root {
    --blend1: color-mix(in srgb, var(--ink), var(--mainpaper));
}
@media (prefers-color-scheme: light){
    :root {
        --ink: rgb(27, 27, 27); 
        --wallpaper: rgb(220, 221, 228);
        --mainpaper: rgb(243, 243, 243); 
        --muted: rgb(219, 241, 252);
        --focus: rgb(80, 195, 218);
        --active: rgb(105 210 231);
    }
}
@media (prefers-color-scheme: dark){
    :root {
        --ink: rgb(245, 244, 244);
        --wallpaper: rgb(34, 27, 27);
        --mainpaper: rgb(41, 37, 37);
        --muted: rgb(17, 51, 68);
        --focus: rgb(56, 94, 102);
        --active: rgb(57, 153, 172);
    }
}

/* there is also 
*  accent-color: rgb(1 2 3); 
*  caret-color: rgb(1 2 3)
*  though the default seems fine with the fairly simple color scheme I have here 
*/

html {
	font-size: 1rem;
    box-sizing: border-box;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

body {
    background-color: var(--wallpaper);
    background-image: linear-gradient(90deg, var(--mainpaper) 50%, transparent 50%), linear-gradient(var(--mainpaper) 50%, transparent 50%);
    background-size: .5em .5em;
    color: var(--ink);
    font-family: 'Noto Sans', 'Open Sans', sans-serif;
	line-height: 1.4;
    margin: 0;
}

main {
    background-color: var(--mainpaper);
    padding: 1em;
    width: min(700px, 100%);
    margin-inline: auto;
}

/* ^ Just wanted a simple centered column on desktop and this avoids @media query etc 
* using "display: grid; justify-content: center;" on the body is good but 
* <main> is the only child element I'm using here so testing this out. 
* "margin-inline" is 94% in 2024, so very usable. 
*/

article {
    margin-bottom: 5em;
}

h1 {
    font-size: clamp(2em, 3vw, 4em);
    text-align: center;
    text-wrap: balance; 
}

p {
    font-size: clamp(1em, 1.1vw, 1.2em);
    /* this is a test of more flexible font size but fiddling takes time. 
    * note that apparently the middle one HAS to be vw for fluid resizing. 
    */
}

img, 
picture, 
svg, 
video {
    display: block;
    max-width: 100%;
    object-fit: cover;
    aspect-ratio: 1;
}

/* mess of random tests ----------------------------------------------------- */

.grayscale {
    filter: grayscale(1);
}

.foggy {
    filter: blur(3px);
}

.foggy:hover {
    filter: none;
    transition: filter 1s; 
}

/* This always looked awkward using :hover and can't work on mobile anyways so I dropped it.  
 * What use case for this then? Trigger with buttons instead? 
*/
.flipper {
    display: block;
    transition: transform 1s;
    transform-style: preserve-3d;
}

.info {
    transform: rotateY(180deg);
    backface-visibility: hidden;
    background: rgb(255 255 255 / 0.7);
    /*new style of doing alpha instead of rgba() */
}

.clip1 {
    clip-path: ellipse(25% 45% at 50% 50%);
}

.fadein {
    animation: fade-in linear;
    animation-timeline: view(); /* seems to not be supported in Firefox 122, but is in Chrome */
}
@keyframes fade-in {
    from { opacity: .1; }
    to { opacity: 1; }
}

.colortest1 {
    color: var(--blend1);
}

.card-wrapper {
    container-type: inline-size;
}

.card-item {
    display: grid;
    gap: 1em;
}

@container (width > 45ch) {
    .card-item {
        grid-template-columns: auto minmax(12ch, 1fr);
    }
}

/* Forms -------------------------------------------------------------------- */

fieldset {
    border: 3px solid rgb(176 148 127 / .5);
	margin-bottom: 1em;
}

button,
input,
select,
textarea {
    font: inherit; 
    margin: 0; 
}

button {
    background-color: var(--muted);
    border: none;
    border-radius: .5em;
    cursor: pointer;
    font-weight: 700;
    padding: .5em;
    transition: all 0.1s;
}

button:hover, 
button:focus {
    background-color: var(--focus);
}

button:active {
	background-color: var(--active);
	transform: translateY(3px);
}

/* Default is inline-block, which makes a mess if you want a button UNDER it 
 * Setting it to display:block is much simpler than trying to wrap everything  
 * in the form with divs, or setting them all to display:list-item, lol. 
*/

textarea {
    display: block;
    margin-bottom: 1em;
}
